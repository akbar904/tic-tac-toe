{"entry_point_file_name":"main.py","files":[{"name":"main.py","class_diagram":"@startuml\n\nclass Main {\n+ __init__()\n+ run()\n}\n\n@enduml"},{"name":"board.py","class_diagram":"@startuml\n\nBoard\n\n+ __init__(rows: int, cols: int, mines: int)\n+ display_board(): str\n+ reveal_tile(x: int, y: int): bool\n+ flag_tile(x: int, y: int): None\n+ is_game_over(): bool\n+ is_game_won(): bool\n\n@enduml"},{"name":"tile.py","class_diagram":"@startuml\n\nTile\n\n+ __init__(x: int, y: int)\n+ reveal(): None\n+ flag(): None\n+ is_revealed(): bool\n+ is_flagged(): bool\n+ set_mine(): None\n+ is_mine(): bool\n+ set_adjacent_mines(count: int): None\n+ get_display_symbol(): str\n\n@enduml"}],"sequence_diagram":"@startuml\n\nparticipant Main\nparticipant Board\nparticipant Tile\n\nMain -> Board: __init__(9, 9, 10)\nBoard -> Tile: __init__(x, y)\n\nloop until game over\n\n    Main -> Board: display_board()\n    Board -> Tile: get_display_symbol()\n\n    Main -> Board: reveal_tile(x, y) or flag_tile(x, y)\n    Board -> Tile: reveal() or flag()\n\n    Main -> Board: is_game_over()\n    Main -> Board: is_game_won()\n\nend\n\n@enduml"}